})
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
DT::datatable(x0[order(-SCORE,NAME),])
})
output$tot <- DT::renderDataTable(table_data())
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
ui <- fluidPage(
# App title ----
titlePanel("Nitrogen threats at designates sites in NI"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
radioButtons("site_typ", "Site Type",
c("SAC","SSSI"),"SAC"),
checkboxGroupInput("ag_var", "Emission scores to combine",
unique(ag$VARIABLE),unique(ag$VARIABLE)[1]),
radioButtons("sa_dep", "Deposition type",
unique(sa$Dep_typ),NULL),
checkboxGroupInput("sa_var", "Source attribution scores to combine",
unique(sa$VARIABLE),NULL),
),
# Main panel for displaying outputs ----
mainPanel(
#DT::dataTableOutput("mytable")
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("All sites", DT::dataTableOutput("tab")),
tabPanel("Selected site",DT::dataTableOutput("sel"))
)
)
)
)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
DT::datatable(x0[order(-SCORE,NAME),])
})
output$tab <- DT::renderDataTable(table_data())
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
DT::datatable(x0[order(-SCORE,NAME),])
})
output$tab <- DT::renderDataTable(table_data()[,.(`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
DT::datatable(x0[order(-SCORE,NAME),])
})
output$tab <- DT::renderDataTable(as.data.table(table_data())[,.(`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(ag_var,sa_var)]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=sum(SCORE)/N_IND,`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=sum(SCORE)/N_IND,`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=NAME])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
af
ag
sa
svr <- function(input,output,session){
table_data <- reactive({
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[VARIABLE %in% input$ag_var,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[Dep_typ == input$sa_dep & VARIABLE %in% input$sa_var,
.(SITECODE=ID,NAME=Name,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
ag
svr <- function(input,output,session){
ids <- observeEvent(input$site_typ,{ag[SITE_TYPE==input$site_typ,SITECOE]})
table_data <- reactive({
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids() &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids() &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
ids <- reactive(input$site_typ,{ag[SITE_TYPE==input$site_typ,SITECOE]})
table_data <- reactive({
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids() &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids() &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECOE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
ag <- fread("P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Agric_density_summary.csv")
ag <- fread("P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Agric_density_summary.csv")
sa <- fread("P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Source_attr.csv")
library(markdown)
ui <- fluidPage(
# App title ----
titlePanel("Nitrogen threats at designates sites in NI"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
radioButtons("site_typ", "Site Type",
c("SAC","ASSI"),"SAC"),
checkboxGroupInput("ag_var", "Emission scores to combine",
unique(ag$VARIABLE),unique(ag$VARIABLE)[1]),
radioButtons("sa_dep", "Deposition type",
unique(sa$Dep_typ),NULL),
checkboxGroupInput("sa_var", "Source attribution scores to combine",
unique(sa$VARIABLE),NULL),
),
# Main panel for displaying outputs ----
mainPanel(
#DT::dataTableOutput("mytable")
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("All sites", DT::dataTableOutput("tab")),
tabPanel("Selected site",DT::dataTableOutput("sel"))
)
)
)
)
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)])
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable(x <- table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)]
x[order(`Total Score`),])
output$sel <- DT::renderDataTable(table_data())
}
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable({x <- table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)]
x[order(`Total Score`),]})
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable({x <- table_data()[,.(`Number of Indicators` = N_IND,`Average Score`=round(sum(SCORE)/N_IND,2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)]
x[order(-`Total Score`),]})
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
s
svr <- function(input,output,session){
table_data <- reactive({
ids <- ag[SITE_TYPE==input$site_typ,SITECODE]
x0 <- ag[0,.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE,SCORE)]
if(!is.null(input$ag_var)){x0 <- rbind(x0, ag[SITECODE %in% ids &
VARIABLE %in% input$ag_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
if(!is.null(input$sa_var)){x0 <- rbind(x0, sa[SITECODE %in% ids &
Dep_typ == input$sa_dep &
VARIABLE %in% input$sa_var,
.(SITECODE,NAME,DATA_SRCE,VARIABLE,VALUE=round(VALUE,1),SCORE)])}
x0[,N_IND := length(c(input$ag_var,input$sa_var))]
x0[order(-SCORE,NAME),]
})
output$tab <- DT::renderDataTable({x <- table_data()[,.(`Number of Indicators` = first(N_IND),`Average Score`=round(sum(SCORE/N_IND),2),`Total Score`=sum(SCORE)),by=.(SITECODE,NAME)]
x[order(-`Total Score`),]})
output$sel <- DT::renderDataTable(table_data())
}
shinyApp(ui,svr)
x <- fread("N:\\ukwide_sssi\\DA_totals\\nh3_emissions_by_DA.csv")
require(data.table)
x <- fread("N:\\ukwide_sssi\\DA_totals\\nh3_emissions_by_DA.csv")
x
x[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
x
unique(x$SNAP)
x[,SNAP := factor(SNAP,levels=c("cattle","sheep","pigs","poultry","minor","fertiliser","non_agric"),
labels=c("Cattle","Sheep","Pigs","Poultry","Minor Livestock","Non-agricultural"))]
x[,SNAP := factor(SNAP,levels=c("cattle","sheep","pigs","poultry","minor","fertiliser","non_agric"),
labels=c("Cattle","Sheep","Pigs","Poultry","Minor Livestock","Mineral fertiliser","Non-agricultural"))]
x
xd<-dcast(x,Scenario+SNAP~Country,value.var = "kt")
xd
x <- fread("N:\\ukwide_sssi\\DA_totals\\nh3_emissions_by_DA.csv")
x[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
x[,Source := factor(SNAP,levels=c("cattle","sheep","pigs","poultry","minor","fertiliser","non_agric"),
labels=c("Cattle","Sheep","Pigs","Poultry","Minor Livestock","Mineral fertiliser","Non-agricultural"))]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
fwrite(xd,"N:\\ukwide_sssi\\DA_totals\\EJC_nh3_emissions_by_DA.csv",row.names = F)
y <- fread("N:\\ukwide_sssi\\DA_totals\\nox_emissions_by_DA.csv")
y
y[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
unique(y$SNAP)
x[,Source := factor(SNAP,levels=paste0("S",1:11),
labels=c("Combustion in Energy Production & Transformation",
"Combustion in Commercial, Institutional & Residential & Agriculture",
"Combustion in Industry",
"Production Processes",
"Extraction & Distribution of Fossil Fuels",
"Solvent Use",
"Road Transport",
"Other Transport & Mobile Machinery",
"Waste Treatment & Disposal",
"Agriculture Forestry & Land Use Change","Nature"))]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
y <- fread("N:\\ukwide_sssi\\DA_totals\\nox_emissions_by_DA.csv")
y[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
y[,Source := factor(SNAP,levels=paste0("S",1:11),
labels=c("Combustion in Energy Production & Transformation",
"Combustion in Commercial, Institutional & Residential & Agriculture",
"Combustion in Industry",
"Production Processes",
"Extraction & Distribution of Fossil Fuels",
"Solvent Use",
"Road Transport",
"Other Transport & Mobile Machinery",
"Waste Treatment & Disposal",
"Agriculture Forestry & Land Use Change","Nature"))]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
xd<-dcast(y,Scenario+Source~Country,value.var = "kt")
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
yd<-dcast(y,Scenario+Source~Country,value.var = "kt")
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
require(data.table)
x <- fread("N:\\ukwide_sssi\\DA_totals\\nh3_emissions_by_DA.csv")
x[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
x[,Source := factor(SNAP,levels=c("cattle","sheep","pigs","poultry","minor","fertiliser","non_agric"),
labels=c("Cattle","Sheep","Pigs","Poultry","Minor Livestock","Mineral fertiliser","Non-agricultural"))]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
fwrite(xd,"N:\\ukwide_sssi\\DA_totals\\EJC_nh3_emissions_by_DA.csv",row.names = F)
y <- fread("N:\\ukwide_sssi\\DA_totals\\nox_emissions_by_DA.csv")
y[,Country := factor(AREA,levels=c("ENGLAND","WALES","SCOTLAND","NI"),
labels = c("England","Wales","Scotland","Northern Ireland"))]
y[,Source := factor(SNAP,levels=paste0("S",1:11),
labels=c("Combustion in Energy Production & Transformation",
"Combustion in Commercial, Institutional & Residential & Agriculture",
"Combustion in Industry",
"Production Processes",
"Extraction & Distribution of Fossil Fuels",
"Solvent Use",
"Road Transport",
"Other Transport & Mobile Machinery",
"Waste Treatment & Disposal",
"Agriculture Forestry & Land Use Change","Nature"))]
yd<-dcast(y,Scenario+Source~Country,value.var = "kt")
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
yd
x
unique(x$Scenario)
x<-x[Scenario%in%c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"),]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
x[,Scenario:=factor(Scenario,levels=c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"))]
xd<-dcast(x,Scenario+Source~Country,value.var = "kt")
xd[order("Scenario","Source")]
xd
xd<-xd[order(Scenario,Source)]
xd
fwrite(xd,"N:\\ukwide_sssi\\DA_totals\\EJC_nh3_emissions_by_DA.csv",row.names = F)
xd
fwrite(xd,"N:\\ukwide_sssi\\DA_totals\\EJC_nh3_emissions_by_DA.csv",row.names = F)
xd<-xd[order(Source,Scenario)]
xd<-xd[order(Source,Scenario)]
fwrite(xd,"N:\\ukwide_sssi\\DA_totals\\EJC_nh3_emissions_by_DA.csv",row.names = F)
y<-y[Scenario%in%c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"),]
y[,Scenario:=factor(Scenario,levels=c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"))]
yd<-dcast(y,Scenario+Source~Country,value.var = "kt")
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
yd<-yd[order(Source,Scenario)]
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
y[,Source := factor(SNAP,levels=paste0("S",1:11),
labels=c("Energy Production","Domestic combustion","Industry Combustion","Industry Proc.","Fossil Fuel Extraction",
"Solvents","Road Transport","Other Transport","Waste","Agriculture","Other"))]
y<-y[Scenario%in%c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"),]
y[,Scenario:=factor(Scenario,levels=c("2017 Baseline","2030 BAU (WM)","2030 NAPCP+DA (NECR NOx)"))]
yd<-dcast(y,Scenario+Source~Country,value.var = "kt")
yd<-yd[order(Source,Scenario)]
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
fwrite(yd,"N:\\ukwide_sssi\\DA_totals\\EJC_nox_emissions_by_DA.csv",row.names = F)
shiny::runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
?addRasterImage
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
?removeImage
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
if(input$rast == "NH3_conc"){
r <- nh3_r[,.(x,y,z)]
cols <- c("#91e4ff","#fff200","#ffbb00","#ff0000","#cc0066")
brks<-c(-1,1,2,3,4,500)
labs<-c("0 - 1","> 1 - 2","> 2 - 3","> 3 - 4","> 4")
}
if(input$rast == "TotN_dep"){
r <- dep_r[Dep_typ==input$sa_dep,.(x,y,z)]
if(input$rast == "TotN_dep"){cols <- c("#F1EEF6","#D7B5D8","#DF65B0","#DD1C77","#980043")
brks<-c(-1,1,5,10,25,5000)
labs<-c("0 - 1","> 1 - 5","> 5 - 10","> 10 - 25","> 25 - 50")}
r[,cl:=cut(z,brks,1:5)]
r[,lb:=cut(z,brks,labs)]
input<-list()
input$rast = "NH3_conc"
r <- nh3_r[,.(x,y,z)]
svr_v<-F
if(svr_v == T){lib<-"/home/edcarn/R/x86_64-pc-linux-gnu-library/3.4"
}
if(svr_v == F){lib<-NULL
pth<-paste0("C:/Shiny_dev/")
setwd(pth)}
require(shiny,lib.loc = lib)
require(markdown,lib.loc = lib)
require(data.table,lib.loc = lib)
require(DT,lib.loc = lib)
require(leaflet,lib.loc = lib)
require(raster,lib.loc = lib)
require(sp,lib.loc = lib)
require(rgdal,lib.loc = lib)
#setwd("./ShinyApps/NI_frame")
ag <- fread("./data/Agric_density_summary.csv")
sa <- fread("./data/Source_attr.csv")
nh3 <- fread("./data/conc_summary.csv")
nh3_r <-fread("./data/conc_r.csv")
dep_r <-fread("./data/dep_r.csv")
r <- nh3_r[,.(x,y,z)]
cols <- c("#91e4ff","#fff200","#ffbb00","#ff0000","#cc0066")
brks<-c(-1,1,2,3,4,500)
labs<-c("0 - 1","> 1 - 2","> 2 - 3","> 3 - 4","> 4")
r[,cl:=cut(z,brks,1:5)]
r[,lb:=cut(z,brks,labs)]
r
runApp('P:/NECxxxxx_NIEA_Ballynahone_NH3/framework/Shiny_Inputs/Shiny_version')
